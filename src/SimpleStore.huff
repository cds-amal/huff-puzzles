
/** 
 *  SIMPLE_STORE HUFF EXERCISE
 *
 *  One of the storage locations available to devs when writing smart contracts
 *  is Storage. Its persistent and expensive
 *  
 *  The task is to write within the `MAIN` macro below, 2 functions...
 *      - One named `store()` that takes one function argument and stores it in
 *        storage slot 0,
 *      - the second named `read()` that simply returns what is stored at
   *      storage slot 0.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function store(uint256) payable returns()
#define function read() payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
    // Get the fn sig from calldata
    push0 calldataload 0xE0 shr  // [callSig]
    dup1                         // [callSig, callSig]

    __FUNC_SIG(store) eq store jumpi  // [fnSig]
    __FUNC_SIG(read) eq read jumpi    // []

    // Revert if wrong fn
    push0 push0 revert

    store:
        0x04 calldataload             // [u1]
        push0 sstore                  // []
        push0 push0 return            // []

    read:
        push0 sload                   // [u1]
        push0 mstore                  // []
        0x20 push0 return             // []
}
