/** 
 *  MULTIPLY HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like multiplication etc
 *  
 *  The task is to write within the `MAIN` macro below, a function named `multiply` that takes in 2 uint256s, and returns their product. Be sure to revert on overflow
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function multiply(uint256, uint256) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {

    // Get the fn sig from calldata
    push0 calldataload 0xE0 shr         // [call_sig]
    __FUNC_SIG(multiply) eq mult jumpi  // []

    // Revert, unknown selector!
    push0 push0 revert

    mult:
        0x04 calldataload         // [u1]
        0x24 calldataload         // [u2, u1]
        dup2                      // [u1, u2, u1]
        dup2                      // [u2, u1, u2, u1]
        mul                       // [p, u2, u1]

        // if product == 0 goto exit
        dup1 iszero exit jumpi    // [p, u2, u1]

        // Check for overflow
        dup1 swap2                // [u2, p, p, u1]

        // if u2 > product goto overflow
        gt overflow jumpi         // [p, u1]
        // if u1 > product goto overflow
        dup1 swap2                // [u1, p, p]
        gt overflow jumpi         // [p]

    exit:                         // [p]
        push0 mstore              // []
        0x32 push0 return         // []

    overflow:                     // [p, ?]
        push0 push0 revert
}
