/** 
 *  BASIC_BANK HUFF EXERCISE
 *  
 *  The task is to create a basic bank with huff.
 *  Functionalities include:
 *      - depositing tokens via similar to how solidity's `receive` function
 *        works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()

#define constant DEPOSIT = FREE_STORAGE_POINTER()

/// @notice generate storage slot for a balance[address] hashmap.
#define macro GET_ADDRESS_SLOT(ptr) = takes(0) returns (1) {
    // Input stack: [caller]
    // Load the data into memory and hash it, while preserving the memory location.
    <ptr>               // [ptr, caller]
    mstore              // []

    // Hash the data, generating a key.
    0x20                // [32]
    <ptr>               // [ptr, 32]
    sha3                // [slot]
}

#define macro DISPATCH(deposit, balance_of, withdraw) = takes(0) returns(0) {
    // Get the fn sig from calldata
    push0 calldataload 0xE0 shr
    dup1 __FUNC_SIG(balanceOf) eq <balance_of> jumpi  // [fnSig]
    __FUNC_SIG(withdraw) eq <withdraw> jumpi          // []

    // fallback into deposit
    <deposit> jump
}

#define macro DEPOSIT() = takes(0) returns(0) {
    caller                     // [caller]
    GET_ADDRESS_SLOT(DEPOSIT)  // [slot]
    dup1 sload                 // [current_value, slot]
    callvalue add              // [new_value, slot]
    swap1 sstore               // []
    push0 push0 return         // []
}

#define macro BALANCE_OF() = takes(0) returns(0) {
    0x04 calldataload           // [address]
    GET_ADDRESS_SLOT(DEPOSIT)   // [slot]
    sload                       // [balance]
    push0 mstore                // []
    0x20 push0 return
}

#define macro WITHDRAW() = takes(0) returns(0) {
    caller                      // [caller]
    GET_ADDRESS_SLOT(DEPOSIT)   // [slot]
    dup1                        // [slot, slot]
    0x04 calldataload           // [amount, slot, slot]
    dup1                        // [amount, amount, slot, slot]
    swap2                       // [slot, amount, amount, slot]
    sload                       // [balance, amount, amount, slot]
    dup1 iszero no_funds jumpi  // [balance, amount, amount, slot]
    swap1                       // [amount , balance, amount, slot]
    dup2                        // [balance, amount, balance, amount, slot]

    swap1                       // [amount, balance, balance, amount, slot]
    gt no_funds jumpi           // [balance, amount, slot]

    // @invariant: amount <= balance 
    TRANSFER()

    no_funds:
        push0 push0 revert      // NOT ENOUGH FUNDS
}

#define macro TRANSFER() = takes(0) returns(0) {
    // Reduce deposit  // [balance, amount, slot]
    dup2               // [amount, balance, amount, slot]
    swap1              // [balance, amount, amount, slot]
    // @invariant: amount <= balance
    sub                // [reducedBalance, amount, slot]

    // Update deposit in storage
    dup3               // [slot, reducedBalance, amount, slot]
    sstore             // [amount, slot]
    swap1 pop          // [amount]

    // Transfer amount to caller
    push0              // [0, amount]
    dup1               // [0, 0, amount]
    dup1               // [0, 0, 0, amount]
    dup1               // [0, 0, 0, 0, amount]
    swap4              // [amount, 0, 0, 0, 0]
    caller             // [address, amount, 0 ,0, 0, 0]
    push0              // [0, address, amount, 0, 0, 0, 0] 
    call               // [] (gas, address, amount, argOffset, argSize, retOffset, retSize)
    stop
}

#define macro MAIN() = takes(0) returns(0) {

    DISPATCH(deposit, balance_of, withdraw)

    deposit:
        DEPOSIT()

    balance_of:
        BALANCE_OF()

    withdraw:
        WITHDRAW()
}

/*
0x0000000000000000000000000000000000000000000000000000000000000000
balanceOf: 
0x70a08231000000000000000000000000be862ad9abfe6f22bcb087716c7d89a26051f74c

Withdraw
0x2e1a7d4d0000000000000000000000000000000000000000000000000000000000000003
*/
